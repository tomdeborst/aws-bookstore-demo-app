{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('./Call');\n\nvar GetMethod = require('./GetMethod');\n\nvar IsCallable = require('./IsCallable');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose\n\n\nmodule.exports = function IteratorClose(iterator, completion) {\n  if (Type(iterator) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(iterator) is not Object');\n  }\n\n  if (!IsCallable(completion)) {\n    throw new $TypeError('Assertion failed: completion is not a thunk for a Completion Record');\n  }\n\n  var completionThunk = completion;\n  var iteratorReturn = GetMethod(iterator, 'return');\n\n  if (typeof iteratorReturn === 'undefined') {\n    return completionThunk();\n  }\n\n  var completionRecord;\n\n  try {\n    var innerResult = Call(iteratorReturn, iterator, []);\n  } catch (e) {\n    // if we hit here, then \"e\" is the innerResult completion that needs re-throwing\n    // if the completion is of type \"throw\", this will throw.\n    completionThunk();\n    completionThunk = null; // ensure it's not called twice.\n    // if not, then return the innerResult completion\n\n    throw e;\n  }\n\n  completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does\n\n  completionThunk = null; // ensure it's not called twice.\n\n  if (Type(innerResult) !== 'Object') {\n    throw new $TypeError('iterator .return must return an object');\n  }\n\n  return completionRecord;\n};","map":{"version":3,"sources":["/home/tpd3/compx341/aws-bookstore-demo-app/assets/node_modules/es-abstract/2020/IteratorClose.js"],"names":["GetIntrinsic","require","$TypeError","Call","GetMethod","IsCallable","Type","module","exports","IteratorClose","iterator","completion","completionThunk","iteratorReturn","completionRecord","innerResult","e"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,UAAjC,EAA6C;AAC7D,MAAIL,IAAI,CAACI,QAAD,CAAJ,KAAmB,QAAvB,EAAiC;AAChC,UAAM,IAAIR,UAAJ,CAAe,gDAAf,CAAN;AACA;;AACD,MAAI,CAACG,UAAU,CAACM,UAAD,CAAf,EAA6B;AAC5B,UAAM,IAAIT,UAAJ,CAAe,qEAAf,CAAN;AACA;;AACD,MAAIU,eAAe,GAAGD,UAAtB;AAEA,MAAIE,cAAc,GAAGT,SAAS,CAACM,QAAD,EAAW,QAAX,CAA9B;;AAEA,MAAI,OAAOG,cAAP,KAA0B,WAA9B,EAA2C;AAC1C,WAAOD,eAAe,EAAtB;AACA;;AAED,MAAIE,gBAAJ;;AACA,MAAI;AACH,QAAIC,WAAW,GAAGZ,IAAI,CAACU,cAAD,EAAiBH,QAAjB,EAA2B,EAA3B,CAAtB;AACA,GAFD,CAEE,OAAOM,CAAP,EAAU;AACX;AAEA;AACAJ,IAAAA,eAAe;AACfA,IAAAA,eAAe,GAAG,IAAlB,CALW,CAKa;AAExB;;AACA,UAAMI,CAAN;AACA;;AACDF,EAAAA,gBAAgB,GAAGF,eAAe,EAAlC,CA5B6D,CA4BvB;;AACtCA,EAAAA,eAAe,GAAG,IAAlB,CA7B6D,CA6BrC;;AAExB,MAAIN,IAAI,CAACS,WAAD,CAAJ,KAAsB,QAA1B,EAAoC;AACnC,UAAM,IAAIb,UAAJ,CAAe,wCAAf,CAAN;AACA;;AAED,SAAOY,gBAAP;AACA,CApCD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('./Call');\nvar GetMethod = require('./GetMethod');\nvar IsCallable = require('./IsCallable');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose\n\nmodule.exports = function IteratorClose(iterator, completion) {\n\tif (Type(iterator) !== 'Object') {\n\t\tthrow new $TypeError('Assertion failed: Type(iterator) is not Object');\n\t}\n\tif (!IsCallable(completion)) {\n\t\tthrow new $TypeError('Assertion failed: completion is not a thunk for a Completion Record');\n\t}\n\tvar completionThunk = completion;\n\n\tvar iteratorReturn = GetMethod(iterator, 'return');\n\n\tif (typeof iteratorReturn === 'undefined') {\n\t\treturn completionThunk();\n\t}\n\n\tvar completionRecord;\n\ttry {\n\t\tvar innerResult = Call(iteratorReturn, iterator, []);\n\t} catch (e) {\n\t\t// if we hit here, then \"e\" is the innerResult completion that needs re-throwing\n\n\t\t// if the completion is of type \"throw\", this will throw.\n\t\tcompletionThunk();\n\t\tcompletionThunk = null; // ensure it's not called twice.\n\n\t\t// if not, then return the innerResult completion\n\t\tthrow e;\n\t}\n\tcompletionRecord = completionThunk(); // if innerResult worked, then throw if the completion does\n\tcompletionThunk = null; // ensure it's not called twice.\n\n\tif (Type(innerResult) !== 'Object') {\n\t\tthrow new $TypeError('iterator .return must return an object');\n\t}\n\n\treturn completionRecord;\n};\n"]},"metadata":{},"sourceType":"script"}