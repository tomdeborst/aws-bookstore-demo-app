{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction unimplementedError(methodName, classname) {\n  return new Error(String(methodName) + ' is a required method of ' + String(classname) + ', but was not implemented.');\n}\n\nvar EnzymeAdapter = function () {\n  function EnzymeAdapter() {\n    _classCallCheck(this, EnzymeAdapter);\n\n    this.options = {};\n  } // Provided a bag of options, return an `EnzymeRenderer`. Some options can be implementation\n  // specific, like `attach` etc. for React, but not part of this interface explicitly.\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n\n\n  _createClass(EnzymeAdapter, [{\n    key: 'createRenderer',\n    value: function () {\n      function createRenderer(options) {\n        throw unimplementedError('createRenderer', 'EnzymeAdapter');\n      }\n\n      return createRenderer;\n    }() // converts an RSTNode to the corresponding JSX Pragma Element. This will be needed\n    // in order to implement the `Wrapper.mount()` and `Wrapper.shallow()` methods, but should\n    // be pretty straightforward for people to implement.\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n\n  }, {\n    key: 'nodeToElement',\n    value: function () {\n      function nodeToElement(node) {\n        throw unimplementedError('nodeToElement', 'EnzymeAdapter');\n      }\n\n      return nodeToElement;\n    }() // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'matchesElementType',\n    value: function () {\n      function matchesElementType(node, matchingType) {\n        if (!node) {\n          return node;\n        }\n\n        var type = node.type;\n        return type === matchingType;\n      }\n\n      return matchesElementType;\n    }() // eslint-disable-next-line class-methods-use-this, no-unused-vars\n\n  }, {\n    key: 'isValidElement',\n    value: function () {\n      function isValidElement(element) {\n        throw unimplementedError('isValidElement', 'EnzymeAdapter');\n      }\n\n      return isValidElement;\n    }() // eslint-disable-next-line class-methods-use-this, no-unused-vars\n\n  }, {\n    key: 'createElement',\n    value: function () {\n      function createElement(type, props) {\n        throw unimplementedError('createElement', 'EnzymeAdapter');\n      }\n\n      return createElement;\n    }() // eslint-disable-next-line class-methods-use-this\n\n  }, {\n    key: 'invokeSetStateCallback',\n    value: function () {\n      function invokeSetStateCallback(instance, callback) {\n        callback.call(instance);\n      }\n\n      return invokeSetStateCallback;\n    }()\n  }]);\n\n  return EnzymeAdapter;\n}();\n\nEnzymeAdapter.MODES = {\n  STRING: 'string',\n  MOUNT: 'mount',\n  SHALLOW: 'shallow'\n};\nmodule.exports = EnzymeAdapter; //# sourceMappingURL=EnzymeAdapter.js.map","map":{"version":3,"sources":["../src/EnzymeAdapter.js"],"names":["EnzymeAdapter","options","unimplementedError","node","matchingType","type","element","props","instance","callback","STRING","MOUNT","SHALLOW","module"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,CAAA,UAAA,EAAA,SAAA,EAAmD;AACjD,SAAO,IAAA,KAAA,CAAA,MAAA,CAAA,UAAA,CAAA,GAAA,2BAAA,GAAA,MAAA,CAAA,SAAA,CAAA,GAAP,4BAAO,CAAP;AACD;;IAEKA,a;AACJ,WAAA,aAAA,GAAc;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;AACZ,SAAA,OAAA,GAAA,EAAA;AACD,G,CAED;AACA;AACA;;;;;;8BACeC,O,EAAS;AACtB,cAAMC,kBAAAA,CAAAA,gBAAAA,EAAN,eAAMA,CAAN;AACD;;;QAED;AACA;AACA;AACA;;;;;6BACcC,I,EAAM;AAClB,cAAMD,kBAAAA,CAAAA,eAAAA,EAAN,eAAMA,CAAN;AACD;;;QAED;;;;;kCACmBC,I,EAAMC,Y,EAAc;AACrC,YAAI,CAAJ,IAAA,EAAW;AACT,iBAAA,IAAA;AACD;;AAHoC,YAI7BC,IAJ6B,GAIpBF,IAJoB,CAAA,IAAA;AAKrC,eAAOE,IAAAA,KAAP,YAAA;AACD;;;QAED;;;;;8BACeC,O,EAAS;AACtB,cAAMJ,kBAAAA,CAAAA,gBAAAA,EAAN,eAAMA,CAAN;AACD;;;QAED;;;;;6BACcG,I,EAAME,K,EAAoB;AACtC,cAAML,kBAAAA,CAAAA,eAAAA,EAAN,eAAMA,CAAN;AACD;;;QAED;;;;;sCACuBM,Q,EAAUC,Q,EAAU;AACzCA,QAAAA,QAAAA,CAAAA,IAAAA,CAAAA,QAAAA;AACD;;;;;;;;;AAGHT,aAAAA,CAAAA,KAAAA,GAAsB;AACpBU,EAAAA,MAAAA,EADoB,QAAA;AAEpBC,EAAAA,KAAAA,EAFoB,OAAA;AAGpBC,EAAAA,OAAAA,EAAS;AAHW,CAAtBZ;AAMAa,MAAAA,CAAAA,OAAAA,GAAAA,aAAAA,C","sourcesContent":["function unimplementedError(methodName, classname) {\n  return new Error(`${methodName} is a required method of ${classname}, but was not implemented.`);\n}\n\nclass EnzymeAdapter {\n  constructor() {\n    this.options = {};\n  }\n\n  // Provided a bag of options, return an `EnzymeRenderer`. Some options can be implementation\n  // specific, like `attach` etc. for React, but not part of this interface explicitly.\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  createRenderer(options) {\n    throw unimplementedError('createRenderer', 'EnzymeAdapter');\n  }\n\n  // converts an RSTNode to the corresponding JSX Pragma Element. This will be needed\n  // in order to implement the `Wrapper.mount()` and `Wrapper.shallow()` methods, but should\n  // be pretty straightforward for people to implement.\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  nodeToElement(node) {\n    throw unimplementedError('nodeToElement', 'EnzymeAdapter');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  matchesElementType(node, matchingType) {\n    if (!node) {\n      return node;\n    }\n    const { type } = node;\n    return type === matchingType;\n  }\n\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  isValidElement(element) {\n    throw unimplementedError('isValidElement', 'EnzymeAdapter');\n  }\n\n  // eslint-disable-next-line class-methods-use-this, no-unused-vars\n  createElement(type, props, ...children) {\n    throw unimplementedError('createElement', 'EnzymeAdapter');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  invokeSetStateCallback(instance, callback) {\n    callback.call(instance);\n  }\n}\n\nEnzymeAdapter.MODES = {\n  STRING: 'string',\n  MOUNT: 'mount',\n  SHALLOW: 'shallow',\n};\n\nmodule.exports = EnzymeAdapter;\n"]},"metadata":{},"sourceType":"script"}