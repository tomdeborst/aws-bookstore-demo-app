{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @flow\n\n/*:: import type {\n  CombinatorTokenType,\n  SelectorTokenType\n} from './types';*/\n\nvar escapeValue = function escapeValue(value\n/*: string*/\n)\n/*: string*/\n{\n  return JSON.stringify(value);\n};\n\nvar renderSelector = function renderSelector(selectorToken\n/*: SelectorTokenType*/\n) {\n  var tokens = selectorToken.body;\n  var parts = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var token = _step.value;\n      var part = void 0;\n\n      if (token.type === 'universalSelector') {\n        part = '*';\n      } else if (token.type === 'typeSelector') {\n        part = token.name;\n      } else if (token.type === 'idSelector') {\n        part = '#' + token.name;\n      } else if (token.type === 'classSelector') {\n        part = '.' + token.name;\n      } else if (token.type === 'attributePresenceSelector') {\n        part = '[' + token.name + ']';\n      } else if (token.type === 'attributeValueSelector') {\n        part = '[' + token.name + token.operator + escapeValue(token.value) + ']';\n      } else if (token.type === 'pseudoClassSelector') {\n        part = ':' + token.name;\n\n        if (token.parameters.length) {\n          part += '(' + token.parameters.map(escapeValue).join(', ') + ')';\n        }\n      } else if (token.type === 'pseudoElementSelector') {\n        part = '::' + token.name;\n      } else {\n        throw new Error('Unknown token.');\n      }\n\n      parts.push(part);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return parts.join('');\n};\n\nexports.default = function () {\n  var generate = function generate(tokens\n  /*: Array<SelectorTokenType | CombinatorTokenType>*/\n  )\n  /*: string*/\n  {\n    /**\n     * @todo Think of a better name. This array contains selectors or combinators.\n     */\n    var sequences\n    /*: Array<string>*/\n    = [];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = tokens[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var token = _step2.value;\n\n        if (token.type === 'selector') {\n          sequences.push(renderSelector(token));\n        } else if (token.type === 'descendantCombinator') {\n          sequences.push(' ');\n        } else if (token.type === 'childCombinator') {\n          sequences.push(' > ');\n        } else if (token.type === 'adjacentSiblingCombinator') {\n          sequences.push(' + ');\n        } else if (token.type === 'generalSiblingCombinator') {\n          sequences.push(' ~ ');\n        } else {\n          throw new Error('Unknown token.');\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return sequences.join('');\n  };\n\n  return {\n    generate: generate\n  };\n};","map":{"version":3,"sources":["../src/createGenerator.js"],"names":["escapeValue","JSON","renderSelector","tokens","selectorToken","parts","token","part","generate","sequences"],"mappings":"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","sourcesContent":["// @flow\n\nimport type {\n  CombinatorTokenType,\n  SelectorTokenType\n} from './types';\n\nconst escapeValue = (value: string): string => {\n  return JSON.stringify(value);\n};\n\nconst renderSelector = (selectorToken: SelectorTokenType) => {\n  const tokens = selectorToken.body;\n  const parts = [];\n\n  for (const token of tokens) {\n    let part;\n\n    if (token.type === 'universalSelector') {\n      part = '*';\n    } else if (token.type === 'typeSelector') {\n      part = token.name;\n    } else if (token.type === 'idSelector') {\n      part = '#' + token.name;\n    } else if (token.type === 'classSelector') {\n      part = '.' + token.name;\n    } else if (token.type === 'attributePresenceSelector') {\n      part = '[' + token.name + ']';\n    } else if (token.type === 'attributeValueSelector') {\n      part = '[' + token.name + token.operator + escapeValue(token.value) + ']';\n    } else if (token.type === 'pseudoClassSelector') {\n      part = ':' + token.name;\n\n      if (token.parameters.length) {\n        part += '(' + token.parameters.map(escapeValue).join(', ') + ')';\n      }\n    } else if (token.type === 'pseudoElementSelector') {\n      part = '::' + token.name;\n    } else {\n      throw new Error('Unknown token.');\n    }\n\n    parts.push(part);\n  }\n\n  return parts.join('');\n};\n\nexport default () => {\n  const generate = (tokens: Array<SelectorTokenType | CombinatorTokenType>): string => {\n    /**\n     * @todo Think of a better name. This array contains selectors or combinators.\n     */\n    const sequences: Array<string> = [];\n\n    for (const token of tokens) {\n      if (token.type === 'selector') {\n        sequences.push(renderSelector(token));\n      } else if (token.type === 'descendantCombinator') {\n        sequences.push(' ');\n      } else if (token.type === 'childCombinator') {\n        sequences.push(' > ');\n      } else if (token.type === 'adjacentSiblingCombinator') {\n        sequences.push(' + ');\n      } else if (token.type === 'generalSiblingCombinator') {\n        sequences.push(' ~ ');\n      } else {\n        throw new Error('Unknown token.');\n      }\n    }\n\n    return sequences.join('');\n  };\n\n  return {\n    generate\n  };\n};\n"]},"metadata":{},"sourceType":"script"}