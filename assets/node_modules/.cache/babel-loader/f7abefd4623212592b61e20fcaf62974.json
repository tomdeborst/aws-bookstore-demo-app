{"ast":null,"code":"'use strict'; // Generated automatically by nearley\n// http://github.com/Hardmath123/nearley\n\n(function () {\n  function id(x) {\n    return x[0];\n  }\n\n  var flattenDeep = require('lodash.flattendeep');\n\n  var appendItem = function appendItem(a, b) {\n    return function (d) {\n      return d[a].concat([d[b]]);\n    };\n  };\n\n  var appendItemChar = function appendItemChar(a, b) {\n    return function (d) {\n      return d[a].concat(d[b]);\n    };\n  };\n\n  var flatten = function flatten(d) {\n    d = d.filter(function (r) {\n      return r !== null;\n    });\n    return flattenDeep(d);\n  };\n\n  var combinatorMap = {\n    ' ': 'descendantCombinator',\n    '+': 'adjacentSiblingCombinator',\n    '>': 'childCombinator',\n    '~': 'generalSiblingCombinator'\n  };\n\n  var concatUsingCombinator = function concatUsingCombinator(d) {\n    return (Array.isArray(d[0]) ? d[0] : [d[0]]).concat({\n      type: combinatorMap[d[2]]\n    }).concat(d[4]);\n  };\n\n  var parseAsNumber = function parseAsNumber(d, i, reject) {\n    var joined = flattenDeep(d).join('');\n    var parsed = parseFloat(joined);\n\n    if (isNaN(parsed)) {\n      return reject;\n    }\n\n    return parsed;\n  };\n\n  var parseAsBoolean = function parseAsBoolean(d, i, reject) {\n    if (d[0] === 'true') return true;\n    if (d[0] === 'false') return false;\n    return reject;\n  };\n\n  var parseFalsyPrimitive = function parseFalsyPrimitive(d, i, reject) {\n    if (d[0] === 'NaN') return NaN;\n    if (d[0] === 'undefined') return undefined;\n    if (d[0] === 'null') return null;\n    return reject;\n  };\n\n  var grammar = {\n    Lexer: undefined,\n    ParserRules: [{\n      \"name\": \"combinator\",\n      \"symbols\": [\"selector\"]\n    }, {\n      \"name\": \"combinator\",\n      \"symbols\": [\"combinator\", \"_\", /[>+~ ]/, \"_\", \"selector\"],\n      \"postprocess\": concatUsingCombinator\n    }, {\n      \"name\": \"selector\",\n      \"symbols\": [\"selectorBody\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'selector',\n          body: d[0]\n        };\n      }\n    }, {\n      \"name\": \"selectorBody$ebnf$1\",\n      \"symbols\": [\"typeSelector\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"selectorBody$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"selectorBody$ebnf$2\",\n      \"symbols\": []\n    }, {\n      \"name\": \"selectorBody$ebnf$2\",\n      \"symbols\": [\"selectorBody$ebnf$2\", \"simpleSelector\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"selectorBody\",\n      \"symbols\": [\"selectorBody$ebnf$1\", \"selectorBody$ebnf$2\"],\n      \"postprocess\": function postprocess(d, i, reject) {\n        var selectors = flatten(d);\n        if (!selectors.length) return reject;\n        return selectors;\n      }\n    }, {\n      \"name\": \"selectorBody$ebnf$3\",\n      \"symbols\": []\n    }, {\n      \"name\": \"selectorBody$ebnf$3\",\n      \"symbols\": [\"selectorBody$ebnf$3\", \"simpleSelector\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"selectorBody\",\n      \"symbols\": [\"universalSelector\", \"selectorBody$ebnf$3\"],\n      \"postprocess\": flatten\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"idSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"classSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"attributeValueSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"attributePresenceSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"pseudoClassSelector\"]\n    }, {\n      \"name\": \"simpleSelector\",\n      \"symbols\": [\"pseudoElementSelector\"]\n    }, {\n      \"name\": \"typeSelector\",\n      \"symbols\": [\"attributeName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'typeSelector',\n          name: d[0]\n        };\n      }\n    }, {\n      \"name\": \"className$ebnf$1\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }],\n      \"postprocess\": id\n    }, {\n      \"name\": \"className$ebnf$1\",\n      \"symbols\": [],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }, {\n      \"name\": \"className$ebnf$2\",\n      \"symbols\": []\n    }, {\n      \"name\": \"className$ebnf$2\",\n      \"symbols\": [\"className$ebnf$2\", /[_a-zA-Z0-9-]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"className\",\n      \"symbols\": [\"className$ebnf$1\", /[_a-zA-Z]/, \"className$ebnf$2\"],\n      \"postprocess\": function postprocess(d) {\n        return (d[0] || '') + d[1] + d[2].join('');\n      }\n    }, {\n      \"name\": \"attributeName$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"attributeName$ebnf$1\",\n      \"symbols\": [\"attributeName$ebnf$1\", /[_a-zA-Z()0-9-]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"attributeName\",\n      \"symbols\": [/[_a-z()A-Z]/, \"attributeName$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0] + d[1].join('');\n      }\n    }, {\n      \"name\": \"classSelector\",\n      \"symbols\": [{\n        \"literal\": \".\"\n      }, \"className\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'classSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"idSelector\",\n      \"symbols\": [{\n        \"literal\": \"#\"\n      }, \"attributeName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'idSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"universalSelector\",\n      \"symbols\": [{\n        \"literal\": \"*\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'universalSelector'\n        };\n      }\n    }, {\n      \"name\": \"attributePresenceSelector\",\n      \"symbols\": [{\n        \"literal\": \"[\"\n      }, \"attributeName\", {\n        \"literal\": \"]\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'attributePresenceSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [{\n        \"literal\": \"=\"\n      }]\n    }, {\n      \"name\": \"attributeOperator$string$1\",\n      \"symbols\": [{\n        \"literal\": \"~\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$1\"]\n    }, {\n      \"name\": \"attributeOperator$string$2\",\n      \"symbols\": [{\n        \"literal\": \"|\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$2\"]\n    }, {\n      \"name\": \"attributeOperator$string$3\",\n      \"symbols\": [{\n        \"literal\": \"^\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$3\"]\n    }, {\n      \"name\": \"attributeOperator$string$4\",\n      \"symbols\": [{\n        \"literal\": \"$\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$4\"]\n    }, {\n      \"name\": \"attributeOperator$string$5\",\n      \"symbols\": [{\n        \"literal\": \"*\"\n      }, {\n        \"literal\": \"=\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"attributeOperator\",\n      \"symbols\": [\"attributeOperator$string$5\"]\n    }, {\n      \"name\": \"attributeValueSelector\",\n      \"symbols\": [{\n        \"literal\": \"[\"\n      }, \"attributeName\", \"attributeOperator\", \"attributeValue\", {\n        \"literal\": \"]\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'attributeValueSelector',\n          name: d[1],\n          value: d[3],\n          operator: d[2][0]\n        };\n      }\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"falsyPrimitiveStrings\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"numericValue\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"sqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"attributeValue\",\n      \"symbols\": [\"dqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$1\",\n      \"symbols\": [{\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"a\"\n      }, {\n        \"literal\": \"l\"\n      }, {\n        \"literal\": \"s\"\n      }, {\n        \"literal\": \"e\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$1\"],\n      \"postprocess\": parseAsBoolean\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$2\",\n      \"symbols\": [{\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"r\"\n      }, {\n        \"literal\": \"u\"\n      }, {\n        \"literal\": \"e\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$2\"],\n      \"postprocess\": parseAsBoolean\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$3\",\n      \"symbols\": [{\n        \"literal\": \"N\"\n      }, {\n        \"literal\": \"a\"\n      }, {\n        \"literal\": \"N\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$3\"],\n      \"postprocess\": parseFalsyPrimitive\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$4\",\n      \"symbols\": [{\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"u\"\n      }, {\n        \"literal\": \"l\"\n      }, {\n        \"literal\": \"l\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$4\"],\n      \"postprocess\": parseFalsyPrimitive\n    }, {\n      \"name\": \"falsyPrimitiveStrings$string$5\",\n      \"symbols\": [{\n        \"literal\": \"u\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"d\"\n      }, {\n        \"literal\": \"e\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"e\"\n      }, {\n        \"literal\": \"d\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"falsyPrimitiveStrings\",\n      \"symbols\": [\"falsyPrimitiveStrings$string$5\"],\n      \"postprocess\": parseFalsyPrimitive\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"int\", {\n        \"literal\": \".\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }, \"int\", {\n        \"literal\": \".\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }, \"int\", {\n        \"literal\": \".\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }, \"int\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue$string$1\",\n      \"symbols\": [{\n        \"literal\": \"I\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"y\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"numericValue$string$1\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue$string$2\",\n      \"symbols\": [{\n        \"literal\": \"+\"\n      }, {\n        \"literal\": \"I\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"y\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"numericValue$string$2\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"numericValue$string$3\",\n      \"symbols\": [{\n        \"literal\": \"-\"\n      }, {\n        \"literal\": \"I\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"f\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"n\"\n      }, {\n        \"literal\": \"i\"\n      }, {\n        \"literal\": \"t\"\n      }, {\n        \"literal\": \"y\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"numericValue\",\n      \"symbols\": [\"numericValue$string$3\"],\n      \"postprocess\": parseAsNumber\n    }, {\n      \"name\": \"int$ebnf$1\",\n      \"symbols\": [/[0-9]/]\n    }, {\n      \"name\": \"int$ebnf$1\",\n      \"symbols\": [\"int$ebnf$1\", /[0-9]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"int\",\n      \"symbols\": [\"int$ebnf$1\"]\n    }, {\n      \"name\": \"classParameters\",\n      \"symbols\": []\n    }, {\n      \"name\": \"classParameters\",\n      \"symbols\": [\"classParameter\"]\n    }, {\n      \"name\": \"classParameters\",\n      \"symbols\": [\"classParameters\", {\n        \"literal\": \",\"\n      }, \"_\", \"classParameter\"],\n      \"postprocess\": appendItem(0, 3)\n    }, {\n      \"name\": \"classParameter$ebnf$1\",\n      \"symbols\": [/[^()\"', ]/]\n    }, {\n      \"name\": \"classParameter$ebnf$1\",\n      \"symbols\": [\"classParameter$ebnf$1\", /[^()\"', ]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"classParameter\",\n      \"symbols\": [\"classParameter$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0].join('');\n      }\n    }, {\n      \"name\": \"classParameter\",\n      \"symbols\": [\"sqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"classParameter\",\n      \"symbols\": [\"dqstring\"],\n      \"postprocess\": id\n    }, {\n      \"name\": \"pseudoElementSelector$string$1\",\n      \"symbols\": [{\n        \"literal\": \":\"\n      }, {\n        \"literal\": \":\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"pseudoElementSelector\",\n      \"symbols\": [\"pseudoElementSelector$string$1\", \"pseudoClassSelectorName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'pseudoElementSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"pseudoClassSelector\",\n      \"symbols\": [{\n        \"literal\": \":\"\n      }, \"pseudoClassSelectorName\"],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'pseudoClassSelector',\n          name: d[1]\n        };\n      }\n    }, {\n      \"name\": \"pseudoClassSelector\",\n      \"symbols\": [{\n        \"literal\": \":\"\n      }, \"pseudoClassSelectorName\", {\n        \"literal\": \"(\"\n      }, \"classParameters\", {\n        \"literal\": \")\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return {\n          type: 'pseudoClassSelector',\n          name: d[1],\n          parameters: d[3]\n        };\n      }\n    }, {\n      \"name\": \"pseudoClassSelectorName$ebnf$1\",\n      \"symbols\": [/[a-zA-Z0-9-_]/]\n    }, {\n      \"name\": \"pseudoClassSelectorName$ebnf$1\",\n      \"symbols\": [\"pseudoClassSelectorName$ebnf$1\", /[a-zA-Z0-9-_]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"pseudoClassSelectorName\",\n      \"symbols\": [/[a-zA-Z]/, \"pseudoClassSelectorName$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return d[0] + d[1].join('');\n      }\n    }, {\n      \"name\": \"dqstring$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"dqstring$ebnf$1\",\n      \"symbols\": [\"dqstring$ebnf$1\", \"dstrchar\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"dqstring\",\n      \"symbols\": [{\n        \"literal\": \"\\\"\"\n      }, \"dqstring$ebnf$1\", {\n        \"literal\": \"\\\"\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return d[1].join('');\n      }\n    }, {\n      \"name\": \"dstrchar\",\n      \"symbols\": [/[^\"]/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"dstrchar$string$1\",\n      \"symbols\": [{\n        \"literal\": \"\\\\\"\n      }, {\n        \"literal\": \"\\\"\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"dstrchar\",\n      \"symbols\": [\"dstrchar$string$1\"],\n      \"postprocess\": function postprocess(d) {\n        return '\"';\n      }\n    }, {\n      \"name\": \"sqstring$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"sqstring$ebnf$1\",\n      \"symbols\": [\"sqstring$ebnf$1\", \"sstrchar\"],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"sqstring\",\n      \"symbols\": [{\n        \"literal\": \"'\"\n      }, \"sqstring$ebnf$1\", {\n        \"literal\": \"'\"\n      }],\n      \"postprocess\": function postprocess(d) {\n        return d[1].join('');\n      }\n    }, {\n      \"name\": \"sstrchar\",\n      \"symbols\": [/[^']/],\n      \"postprocess\": id\n    }, {\n      \"name\": \"sstrchar$string$1\",\n      \"symbols\": [{\n        \"literal\": \"\\\\\"\n      }, {\n        \"literal\": \"'\"\n      }],\n      \"postprocess\": function joiner(d) {\n        return d.join('');\n      }\n    }, {\n      \"name\": \"sstrchar\",\n      \"symbols\": [\"sstrchar$string$1\"],\n      \"postprocess\": function postprocess(d) {\n        return '\\'';\n      }\n    }, {\n      \"name\": \"_$ebnf$1\",\n      \"symbols\": []\n    }, {\n      \"name\": \"_$ebnf$1\",\n      \"symbols\": [\"_$ebnf$1\", /[ ]/],\n      \"postprocess\": function arrpush(d) {\n        return d[0].concat([d[1]]);\n      }\n    }, {\n      \"name\": \"_\",\n      \"symbols\": [\"_$ebnf$1\"],\n      \"postprocess\": function postprocess(d) {\n        return null;\n      }\n    }],\n    ParserStart: \"combinator\"\n  };\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = grammar;\n  } else {\n    window.grammar = grammar;\n  }\n})();","map":{"version":3,"sources":["../src/grammar.js"],"names":["x","flattenDeep","require","appendItem","d","appendItemChar","flatten","r","combinatorMap","concatUsingCombinator","Array","type","parseAsNumber","joined","parsed","parseFloat","isNaN","parseAsBoolean","parseFalsyPrimitive","grammar","Lexer","ParserRules","body","selectors","name","value","operator","parameters","ParserStart","module","window"],"mappings":"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","sourcesContent":["// Generated automatically by nearley\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) {return x[0]; }\n\n  const flattenDeep = require('lodash.flattendeep');\n  const appendItem = (a, b) => d => d[a].concat([d[b]]);\n  const appendItemChar = (a, b) => d => d[a].concat(d[b]);\n\n  const flatten = d => {\n    d = d.filter((r) => { return r !== null; });\n    return flattenDeep(d);\n  };\n\n  const combinatorMap = {\n    ' ': 'descendantCombinator',\n    '+': 'adjacentSiblingCombinator',\n    '>': 'childCombinator',\n    '~': 'generalSiblingCombinator'\n  };\n\n  const concatUsingCombinator = d => {\n    return (\n        Array.isArray(d[0]) ? d[0] : [d[0]]\n      )\n      .concat({\n        type: combinatorMap[d[2]]\n      })\n      .concat(d[4]);\n  };\n\n  const parseAsNumber = (d, i, reject) => {\n    const joined = flattenDeep(d).join('');\n    const parsed = parseFloat(joined);\n    if (isNaN(parsed)) {\n      return reject\n    }\n    return parsed\n  }\n\n  const parseAsBoolean = (d, i, reject) => {\n    if (d[0] === 'true') return true;\n    if (d[0] === 'false') return false;\n    return reject;\n  }\n\n  const parseFalsyPrimitive = (d, i, reject) => {\n    if (d[0] === 'NaN') return NaN;\n    if (d[0] === 'undefined') return undefined;\n    if (d[0] === 'null') return null;\n    return reject\n  }\nvar grammar = {\n    Lexer: undefined,\n    ParserRules: [\n    {\"name\": \"combinator\", \"symbols\": [\"selector\"]},\n    {\"name\": \"combinator\", \"symbols\": [\"combinator\", \"_\", /[>+~ ]/, \"_\", \"selector\"], \"postprocess\": concatUsingCombinator},\n    {\"name\": \"selector\", \"symbols\": [\"selectorBody\"], \"postprocess\": d => ({type: 'selector', body: d[0]})},\n    {\"name\": \"selectorBody$ebnf$1\", \"symbols\": [\"typeSelector\"], \"postprocess\": id},\n    {\"name\": \"selectorBody$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"selectorBody$ebnf$2\", \"symbols\": []},\n    {\"name\": \"selectorBody$ebnf$2\", \"symbols\": [\"selectorBody$ebnf$2\", \"simpleSelector\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"selectorBody\", \"symbols\": [\"selectorBody$ebnf$1\", \"selectorBody$ebnf$2\"], \"postprocess\": (d, i, reject) => { const selectors = flatten(d); if (!selectors.length) return reject; return selectors; }},\n    {\"name\": \"selectorBody$ebnf$3\", \"symbols\": []},\n    {\"name\": \"selectorBody$ebnf$3\", \"symbols\": [\"selectorBody$ebnf$3\", \"simpleSelector\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"selectorBody\", \"symbols\": [\"universalSelector\", \"selectorBody$ebnf$3\"], \"postprocess\": flatten},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"idSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"classSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"attributeValueSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"attributePresenceSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"pseudoClassSelector\"]},\n    {\"name\": \"simpleSelector\", \"symbols\": [\"pseudoElementSelector\"]},\n    {\"name\": \"typeSelector\", \"symbols\": [\"attributeName\"], \"postprocess\": d => ({type: 'typeSelector', name: d[0]})},\n    {\"name\": \"className$ebnf$1\", \"symbols\": [{\"literal\":\"-\"}], \"postprocess\": id},\n    {\"name\": \"className$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"className$ebnf$2\", \"symbols\": []},\n    {\"name\": \"className$ebnf$2\", \"symbols\": [\"className$ebnf$2\", /[_a-zA-Z0-9-]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"className\", \"symbols\": [\"className$ebnf$1\", /[_a-zA-Z]/, \"className$ebnf$2\"], \"postprocess\": d => (d[0] || '') + d[1] + d[2].join('')},\n    {\"name\": \"attributeName$ebnf$1\", \"symbols\": []},\n    {\"name\": \"attributeName$ebnf$1\", \"symbols\": [\"attributeName$ebnf$1\", /[_a-zA-Z()0-9-]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"attributeName\", \"symbols\": [/[_a-z()A-Z]/, \"attributeName$ebnf$1\"], \"postprocess\": d => d[0] + d[1].join('')},\n    {\"name\": \"classSelector\", \"symbols\": [{\"literal\":\".\"}, \"className\"], \"postprocess\": d => ({type: 'classSelector', name: d[1]})},\n    {\"name\": \"idSelector\", \"symbols\": [{\"literal\":\"#\"}, \"attributeName\"], \"postprocess\": d => ({type: 'idSelector', name: d[1]})},\n    {\"name\": \"universalSelector\", \"symbols\": [{\"literal\":\"*\"}], \"postprocess\": d => ({type: 'universalSelector'})},\n    {\"name\": \"attributePresenceSelector\", \"symbols\": [{\"literal\":\"[\"}, \"attributeName\", {\"literal\":\"]\"}], \"postprocess\": d => ({type: 'attributePresenceSelector', name: d[1]})},\n    {\"name\": \"attributeOperator\", \"symbols\": [{\"literal\":\"=\"}]},\n    {\"name\": \"attributeOperator$string$1\", \"symbols\": [{\"literal\":\"~\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$1\"]},\n    {\"name\": \"attributeOperator$string$2\", \"symbols\": [{\"literal\":\"|\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$2\"]},\n    {\"name\": \"attributeOperator$string$3\", \"symbols\": [{\"literal\":\"^\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$3\"]},\n    {\"name\": \"attributeOperator$string$4\", \"symbols\": [{\"literal\":\"$\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$4\"]},\n    {\"name\": \"attributeOperator$string$5\", \"symbols\": [{\"literal\":\"*\"}, {\"literal\":\"=\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"attributeOperator\", \"symbols\": [\"attributeOperator$string$5\"]},\n    {\"name\": \"attributeValueSelector\", \"symbols\": [{\"literal\":\"[\"}, \"attributeName\", \"attributeOperator\", \"attributeValue\", {\"literal\":\"]\"}], \"postprocess\": \n        d => ({\n          type: 'attributeValueSelector',\n          name: d[1],\n          value: d[3],\n          operator: d[2][0]\n        })\n        },\n    {\"name\": \"attributeValue\", \"symbols\": [\"falsyPrimitiveStrings\"], \"postprocess\": id},\n    {\"name\": \"attributeValue\", \"symbols\": [\"numericValue\"], \"postprocess\": id},\n    {\"name\": \"attributeValue\", \"symbols\": [\"sqstring\"], \"postprocess\": id},\n    {\"name\": \"attributeValue\", \"symbols\": [\"dqstring\"], \"postprocess\": id},\n    {\"name\": \"falsyPrimitiveStrings$string$1\", \"symbols\": [{\"literal\":\"f\"}, {\"literal\":\"a\"}, {\"literal\":\"l\"}, {\"literal\":\"s\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$1\"], \"postprocess\": parseAsBoolean},\n    {\"name\": \"falsyPrimitiveStrings$string$2\", \"symbols\": [{\"literal\":\"t\"}, {\"literal\":\"r\"}, {\"literal\":\"u\"}, {\"literal\":\"e\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$2\"], \"postprocess\": parseAsBoolean},\n    {\"name\": \"falsyPrimitiveStrings$string$3\", \"symbols\": [{\"literal\":\"N\"}, {\"literal\":\"a\"}, {\"literal\":\"N\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$3\"], \"postprocess\": parseFalsyPrimitive},\n    {\"name\": \"falsyPrimitiveStrings$string$4\", \"symbols\": [{\"literal\":\"n\"}, {\"literal\":\"u\"}, {\"literal\":\"l\"}, {\"literal\":\"l\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$4\"], \"postprocess\": parseFalsyPrimitive},\n    {\"name\": \"falsyPrimitiveStrings$string$5\", \"symbols\": [{\"literal\":\"u\"}, {\"literal\":\"n\"}, {\"literal\":\"d\"}, {\"literal\":\"e\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"e\"}, {\"literal\":\"d\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"falsyPrimitiveStrings\", \"symbols\": [\"falsyPrimitiveStrings$string$5\"], \"postprocess\": parseFalsyPrimitive},\n    {\"name\": \"numericValue\", \"symbols\": [\"int\", {\"literal\":\".\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"+\"}, \"int\", {\"literal\":\".\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"-\"}, \"int\", {\"literal\":\".\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"-\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [\"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue\", \"symbols\": [{\"literal\":\"+\"}, \"int\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue$string$1\", \"symbols\": [{\"literal\":\"I\"}, {\"literal\":\"n\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"i\"}, {\"literal\":\"t\"}, {\"literal\":\"y\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"numericValue\", \"symbols\": [\"numericValue$string$1\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue$string$2\", \"symbols\": [{\"literal\":\"+\"}, {\"literal\":\"I\"}, {\"literal\":\"n\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"i\"}, {\"literal\":\"t\"}, {\"literal\":\"y\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"numericValue\", \"symbols\": [\"numericValue$string$2\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"numericValue$string$3\", \"symbols\": [{\"literal\":\"-\"}, {\"literal\":\"I\"}, {\"literal\":\"n\"}, {\"literal\":\"f\"}, {\"literal\":\"i\"}, {\"literal\":\"n\"}, {\"literal\":\"i\"}, {\"literal\":\"t\"}, {\"literal\":\"y\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"numericValue\", \"symbols\": [\"numericValue$string$3\"], \"postprocess\": parseAsNumber},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [/[0-9]/]},\n    {\"name\": \"int$ebnf$1\", \"symbols\": [\"int$ebnf$1\", /[0-9]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"int\", \"symbols\": [\"int$ebnf$1\"]},\n    {\"name\": \"classParameters\", \"symbols\": []},\n    {\"name\": \"classParameters\", \"symbols\": [\"classParameter\"]},\n    {\"name\": \"classParameters\", \"symbols\": [\"classParameters\", {\"literal\":\",\"}, \"_\", \"classParameter\"], \"postprocess\": appendItem(0, 3)},\n    {\"name\": \"classParameter$ebnf$1\", \"symbols\": [/[^()\"', ]/]},\n    {\"name\": \"classParameter$ebnf$1\", \"symbols\": [\"classParameter$ebnf$1\", /[^()\"', ]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"classParameter\", \"symbols\": [\"classParameter$ebnf$1\"], \"postprocess\": d => d[0].join('')},\n    {\"name\": \"classParameter\", \"symbols\": [\"sqstring\"], \"postprocess\": id},\n    {\"name\": \"classParameter\", \"symbols\": [\"dqstring\"], \"postprocess\": id},\n    {\"name\": \"pseudoElementSelector$string$1\", \"symbols\": [{\"literal\":\":\"}, {\"literal\":\":\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"pseudoElementSelector\", \"symbols\": [\"pseudoElementSelector$string$1\", \"pseudoClassSelectorName\"], \"postprocess\": d => ({type: 'pseudoElementSelector', name: d[1]})},\n    {\"name\": \"pseudoClassSelector\", \"symbols\": [{\"literal\":\":\"}, \"pseudoClassSelectorName\"], \"postprocess\": d => ({type: 'pseudoClassSelector', name: d[1]})},\n    {\"name\": \"pseudoClassSelector\", \"symbols\": [{\"literal\":\":\"}, \"pseudoClassSelectorName\", {\"literal\":\"(\"}, \"classParameters\", {\"literal\":\")\"}], \"postprocess\": d => ({type: 'pseudoClassSelector', name: d[1], parameters: d[3]})},\n    {\"name\": \"pseudoClassSelectorName$ebnf$1\", \"symbols\": [/[a-zA-Z0-9-_]/]},\n    {\"name\": \"pseudoClassSelectorName$ebnf$1\", \"symbols\": [\"pseudoClassSelectorName$ebnf$1\", /[a-zA-Z0-9-_]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"pseudoClassSelectorName\", \"symbols\": [/[a-zA-Z]/, \"pseudoClassSelectorName$ebnf$1\"], \"postprocess\": d => d[0] + d[1].join('')},\n    {\"name\": \"dqstring$ebnf$1\", \"symbols\": []},\n    {\"name\": \"dqstring$ebnf$1\", \"symbols\": [\"dqstring$ebnf$1\", \"dstrchar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"dqstring\", \"symbols\": [{\"literal\":\"\\\"\"}, \"dqstring$ebnf$1\", {\"literal\":\"\\\"\"}], \"postprocess\": d => d[1].join('')},\n    {\"name\": \"dstrchar\", \"symbols\": [/[^\"]/], \"postprocess\": id},\n    {\"name\": \"dstrchar$string$1\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"\\\"\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"dstrchar\", \"symbols\": [\"dstrchar$string$1\"], \"postprocess\": d => '\"'},\n    {\"name\": \"sqstring$ebnf$1\", \"symbols\": []},\n    {\"name\": \"sqstring$ebnf$1\", \"symbols\": [\"sqstring$ebnf$1\", \"sstrchar\"], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"sqstring\", \"symbols\": [{\"literal\":\"'\"}, \"sqstring$ebnf$1\", {\"literal\":\"'\"}], \"postprocess\": d => d[1].join('')},\n    {\"name\": \"sstrchar\", \"symbols\": [/[^']/], \"postprocess\": id},\n    {\"name\": \"sstrchar$string$1\", \"symbols\": [{\"literal\":\"\\\\\"}, {\"literal\":\"'\"}], \"postprocess\": function joiner(d) {return d.join('');}},\n    {\"name\": \"sstrchar\", \"symbols\": [\"sstrchar$string$1\"], \"postprocess\": d => '\\''},\n    {\"name\": \"_$ebnf$1\", \"symbols\": []},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"_$ebnf$1\", /[ ]/], \"postprocess\": function arrpush(d) {return d[0].concat([d[1]]);}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"], \"postprocess\": d => null}\n]\n  , ParserStart: \"combinator\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n"]},"metadata":{},"sourceType":"script"}